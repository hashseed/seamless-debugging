diff --git a/third_party/blink/renderer/core/inspector/inspector_trace_events.cc b/third_party/blink/renderer/core/inspector/inspector_trace_events.cc
index 82a88adf0344..8e6ec813f194 100644
--- a/third_party/blink/renderer/core/inspector/inspector_trace_events.cc
+++ b/third_party/blink/renderer/core/inspector/inspector_trace_events.cc
@@ -825,6 +825,7 @@ std::unique_ptr<TracedValue> inspector_receive_response_event::Data(
   value->SetDouble("encodedDataLength", response.EncodedDataLength());
   value->SetBoolean("fromCache", response.WasCached());
   value->SetBoolean("fromServiceWorker", response.WasFetchedViaServiceWorker());
+  value->SetString("serverTiming", response.HttpHeaderField("server-timing"));
   if (response.GetResourceLoadTiming()) {
     value->BeginDictionary("timing");
     RecordTiming(*response.GetResourceLoadTiming(), value.get());
diff --git a/third_party/blink/renderer/devtools/front_end/sdk/CPUProfilerModel.js b/third_party/blink/renderer/devtools/front_end/sdk/CPUProfilerModel.js
index 5377bbbca449..36b3bde567aa 100644
--- a/third_party/blink/renderer/devtools/front_end/sdk/CPUProfilerModel.js
+++ b/third_party/blink/renderer/devtools/front_end/sdk/CPUProfilerModel.js
@@ -120,6 +120,7 @@ SDK.CPUProfilerModel = class extends SDK.SDKModel {
     this._isRecording = true;
     const intervalUs = Common.moduleSetting('highResolutionCpuProfiling').get() ? 100 : 1000;
     this._profilerAgent.setSamplingInterval(intervalUs);
+    SDK.multitargetNetworkManager.setExtraHTTPHeaders({ 'DevTools': 'profiling' });
     return this._profilerAgent.start();
   }
 
@@ -128,6 +129,7 @@ SDK.CPUProfilerModel = class extends SDK.SDKModel {
    */
   stopRecording() {
     this._isRecording = false;
+    SDK.multitargetNetworkManager.setExtraHTTPHeaders({});
     return this._profilerAgent.stop();
   }
 
@@ -137,6 +139,7 @@ SDK.CPUProfilerModel = class extends SDK.SDKModel {
   startPreciseCoverage() {
     const callCount = false;
     const detailed = true;
+    SDK.multitargetNetworkManager.setExtraHTTPHeaders({ 'DevTools': 'coverage' });
     return this._profilerAgent.startPreciseCoverage(callCount, detailed);
   }
 
@@ -151,6 +154,7 @@ SDK.CPUProfilerModel = class extends SDK.SDKModel {
    * @return {!Promise}
    */
   stopPreciseCoverage() {
+    SDK.multitargetNetworkManager.setExtraHTTPHeaders({});
     return this._profilerAgent.stopPreciseCoverage();
   }
 
diff --git a/third_party/blink/renderer/devtools/front_end/sdk/DebuggerModel.js b/third_party/blink/renderer/devtools/front_end/sdk/DebuggerModel.js
index 039ac57a4945..820639df6819 100644
--- a/third_party/blink/renderer/devtools/front_end/sdk/DebuggerModel.js
+++ b/third_party/blink/renderer/devtools/front_end/sdk/DebuggerModel.js
@@ -228,10 +228,12 @@ SDK.DebuggerModel = class extends SDK.SDKModel {
   }
 
   scheduleStepIntoAsync() {
+    SDK.multitargetNetworkManager.setExtraHTTPHeaders({ 'DevTools': 'step-in' });
     this._agent.invoke_stepInto({breakOnAsyncCall: true});
   }
 
   resume() {
+    SDK.multitargetNetworkManager.setExtraHTTPHeaders({});
     this._agent.resume();
     this._isPausing = false;
   }
diff --git a/third_party/blink/renderer/devtools/front_end/sdk/TracingManager.js b/third_party/blink/renderer/devtools/front_end/sdk/TracingManager.js
index edaaa1b4348e..08dc52c88d15 100644
--- a/third_party/blink/renderer/devtools/front_end/sdk/TracingManager.js
+++ b/third_party/blink/renderer/devtools/front_end/sdk/TracingManager.js
@@ -84,6 +84,7 @@ SDK.TracingManager = class extends SDK.SDKModel {
       throw new Error('Tracing is already started');
     const bufferUsageReportingIntervalMs = 500;
     this._activeClient = client;
+    SDK.multitargetNetworkManager.setExtraHTTPHeaders({ 'DevTools': 'tracing' });
     return this._tracingAgent.start(
         categoryFilter, options, bufferUsageReportingIntervalMs, SDK.TracingManager.TransferMode.ReportEvents);
   }
@@ -94,6 +95,7 @@ SDK.TracingManager = class extends SDK.SDKModel {
     if (this._finishing)
       throw new Error('Tracing is already being stopped');
     this._finishing = true;
+    SDK.multitargetNetworkManager.setExtraHTTPHeaders({});
     this._tracingAgent.end();
   }
 };
diff --git a/third_party/blink/renderer/devtools/front_end/timeline/TimelineUIUtils.js b/third_party/blink/renderer/devtools/front_end/timeline/TimelineUIUtils.js
index 2d5f4164c614..17b4ea060acb 100644
--- a/third_party/blink/renderer/devtools/front_end/timeline/TimelineUIUtils.js
+++ b/third_party/blink/renderer/devtools/front_end/timeline/TimelineUIUtils.js
@@ -1281,6 +1281,8 @@ Timeline.TimelineUIUtils = class {
       request.previewElement = await Components.ImagePreview.build(target, request.url, false);
     if (request.previewElement)
       contentHelper.appendElementRow(Common.UIString('Preview'), request.previewElement);
+    if (request.serverTiming)
+      contentHelper.appendElementRow(Common.UIString('Server Timing'), Components.Linkifier.linkifyURL(request.serverTiming));
     return contentHelper.fragment;
   }
 
diff --git a/third_party/blink/renderer/devtools/front_end/timeline_model/TimelineModel.js b/third_party/blink/renderer/devtools/front_end/timeline_model/TimelineModel.js
index c0a9a2c0d7cd..aee7fc7576d1 100644
--- a/third_party/blink/renderer/devtools/front_end/timeline_model/TimelineModel.js
+++ b/third_party/blink/renderer/devtools/front_end/timeline_model/TimelineModel.js
@@ -1554,6 +1554,8 @@ TimelineModel.TimelineModel.NetworkRequest = class {
       this.timing = eventData['timing'];
     if (eventData['fromServiceWorker'])
       this.fromServiceWorker = true;
+    if (eventData['serverTiming'])
+      this.serverTiming = eventData['serverTiming'];
   }
 
   /**
